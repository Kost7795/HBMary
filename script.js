// Redirect from Telegram WebView to browser
if (navigator.userAgent.includes('Telegram')) {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π URL
    const currentUrl = window.location.href;
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    const redirectPage = `
        <!DOCTYPE html>
        <html>
        <head>
            <title>–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ</title>
            <meta charset="UTF-8">
            <style>
                body { 
                    font-family: Arial, sans-serif; 
                    text-align: center; 
                    padding: 50px 20px;
                    background: #000;
                    color: white;
                }
                .container {
                    max-width: 500px;
                    margin: 0 auto;
                }
                .btn {
                    display: inline-block;
                    background: #0088cc;
                    color: white;
                    padding: 15px 30px;
                    text-decoration: none;
                    border-radius: 8px;
                    margin: 10px;
                    font-size: 16px;
                }
                .btn:hover {
                    background: #0077b3;
                }
                .instructions {
                    text-align: left;
                    margin: 30px 0;
                    padding: 20px;
                    background: rgba(255,255,255,0.1);
                    border-radius: 8px;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üì± –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ</h1>
                <p>–î–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ</p>
                
                <div class="instructions">
                    <h3>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</h3>
                    <ol>
                        <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ" –Ω–∏–∂–µ</li>
                        <li>–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç—Ä–∏ —Ç–æ—á–∫–∏ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É</li>
                        <li>–í—ã–±–µ—Ä–∏—Ç–µ "Open in Browser"</li>
                    </ol>
                </div>
                
                <a href="${currentUrl}" class="btn" target="_blank" id="browserLink">
                    –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                </a>
                
                <script>
                    // –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                    setTimeout(function() {
                        const link = document.getElementById('browserLink');
                        link.click();
                    }, 1000);
                    
                    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
                    document.addEventListener('click', function() {
                        window.open('${currentUrl}', '_blank');
                    });
                </script>
            </div>
        </body>
        </html>
    `;
    
    // –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.write(redirectPage);
    document.close();
}

// Mobile Menu Toggle
document.getElementById('mobile-menu').addEventListener('click', function() {
    document.querySelector('.nav-links').classList.toggle('active');
});

// Countdown Timer
function updateCountdown() {
    const targetDate = new Date('November 3, 2025 19:00:00').getTime();
    const now = new Date().getTime();
    const timeLeft = targetDate - now;

    const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
    const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

    document.getElementById('days').textContent = days.toString().padStart(2, '0');
    document.getElementById('hours').textContent = hours.toString().padStart(2, '0');
    document.getElementById('minutes').textContent = minutes.toString().padStart(2, '0');
    document.getElementById('seconds').textContent = seconds.toString().padStart(2, '0');
}

setInterval(updateCountdown, 1000);
updateCountdown();

// Smooth Scrolling with performance optimization
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function(e) {
        e.preventDefault();
        
        const targetId = this.getAttribute('href');
        if (targetId === '#') return;
        
        const targetElement = document.querySelector(targetId);
        if (targetElement) {
            const offsetTop = targetElement.offsetTop - 70;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º requestAnimationFrame –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            const startPosition = window.pageYOffset;
            const distance = offsetTop - startPosition;
            const duration = 800;
            let start = null;
            
            function step(timestamp) {
                if (!start) start = timestamp;
                const progress = timestamp - start;
                const percentage = Math.min(progress / duration, 1);
                
                // easing function –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
                const easeInOut = percentage < 0.5 
                    ? 4 * percentage * percentage * percentage 
                    : 1 - Math.pow(-2 * percentage + 2, 3) / 2;
                
                window.scrollTo(0, startPosition + distance * easeInOut);
                
                if (progress < duration) {
                    window.requestAnimationFrame(step);
                }
            }
            
            window.requestAnimationFrame(step);
            
            // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
            document.querySelector('.nav-links').classList.remove('active');
        }
    });
});

// Fade-in animation on scroll
const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
};

const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.classList.add('fade-in');
        }
    });
}, observerOptions);

document.querySelectorAll('section').forEach(section => {
    observer.observe(section);
});

// Close mobile menu when clicking outside
document.addEventListener('click', function(e) {
    const nav = document.querySelector('.nav-container');
    const menu = document.querySelector('.nav-links');
    if (!nav.contains(e.target) && menu.classList.contains('active')) {
        menu.classList.remove('active');
    }
});

// Scroll Down Arrow functionality
const scrollDownArrow = document.getElementById('scroll-down-arrow');

// Click event to scroll to next section
scrollDownArrow.addEventListener('click', function() {
    const nextSection = document.getElementById('invitation');
    if (nextSection) {
        const offsetTop = nextSection.offsetTop - 70;
        
        const startPosition = window.pageYOffset;
        const distance = offsetTop - startPosition;
        const duration = 800;
        let start = null;
        
        function step(timestamp) {
            if (!start) start = timestamp;
            const progress = timestamp - start;
            const percentage = Math.min(progress / duration, 1);
            
            const easeInOut = percentage < 0.5 
                ? 4 * percentage * percentage * percentage 
                : 1 - Math.pow(-2 * percentage + 2, 3) / 2;
            
            window.scrollTo(0, startPosition + distance * easeInOut);
            
            if (progress < duration) {
                window.requestAnimationFrame(step);
            }
        }
        
        window.requestAnimationFrame(step);
    }
});

// Show/hide arrow based on scroll position
function handleScroll() {
    const heroSection = document.querySelector('.hero');
    const scrollPosition = window.pageYOffset;
    const heroHeight = heroSection.offsetHeight;
    
    // Hide arrow when scrolled down more than 20% of hero section
    if (scrollPosition > heroHeight * 0.2) {
        scrollDownArrow.classList.add('hidden');
    } else {
        scrollDownArrow.classList.remove('hidden');
    }
}

// Tabs functionality
function initTabs() {
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabPanes = document.querySelectorAll('.tab-pane');
    
    tabButtons.forEach(button => {
        button.addEventListener('click', function() {
            const tabId = this.getAttribute('data-tab');
            
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏ –ø–∞–Ω–µ–ª–µ–π
            tabButtons.forEach(btn => btn.classList.remove('active'));
            tabPanes.forEach(pane => pane.classList.remove('active'));
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–µ –∏ –ø–∞–Ω–µ–ª–∏
            this.classList.add('active');
            document.getElementById(`${tabId}-tab`).classList.add('active');
            
            // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—É—Å–µ–ª—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
            setTimeout(() => {
                initCarousel(`${tabId}-tab`);
            }, 50);
        });
    });
}

// Simple Carousel functionality without clones - FIXED VERSION
let carouselInstances = {};

function initCarousel(tabId = 'women-tab') {
    const currentTab = document.getElementById(tabId);
    if (!currentTab) return;
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    if (carouselInstances[tabId]) {
        carouselInstances[tabId].destroy();
    }
    
    const carouselTrack = currentTab.querySelector('.carousel-track');
    const slides = currentTab.querySelectorAll('.carousel-slide');
    const indicators = currentTab.querySelectorAll('.indicator');
    const prevArrow = currentTab.querySelector('.carousel-arrow-prev');
    const nextArrow = currentTab.querySelector('.carousel-arrow-next');
    const carousel = currentTab.querySelector('.carousel');
    
    if (!carouselTrack || !slides.length) return;
    
    const totalSlides = slides.length;
    let currentSlide = 0;
    let isDragging = false;
    let startPos = 0;
    let currentTranslate = 0;
    let prevTranslate = 0;
    let animationID = null;

    const eventHandlers = {
        mouseDown: null,
        mouseMove: null,
        mouseUp: null,
        touchStart: null,
        touchMove: null,
        touchEnd: null,
        prevClick: null,
        nextClick: null,
        indicatorClicks: [],
        resize: null
    };

    function getSlideWidth() {
        return carousel.offsetWidth;
    }

    function initializePosition() {
        const slideWidth = getSlideWidth();
        currentTranslate = -currentSlide * slideWidth;
        prevTranslate = currentTranslate;
        carouselTrack.style.transform = `translateX(${currentTranslate}px)`;
        updateIndicators();
        updateArrows(); // ‚Üê –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–†–ï–õ–û–ö –ü–†–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
    }

    function updateIndicators() {
        indicators.forEach(indicator => indicator.classList.remove('active'));
        if (indicators[currentSlide]) {
            indicators[currentSlide].classList.add('active');
        }
    }

    function updateArrows() {
        const slideWidth = getSlideWidth();
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–µ–ª–∫—É "–Ω–∞–∑–∞–¥" –Ω–∞ –ø–µ—Ä–≤–æ–º —Å–ª–∞–π–¥–µ
        if (prevArrow) {
            if (currentSlide === 0) {
                prevArrow.style.opacity = '0.3';
                prevArrow.style.pointerEvents = 'none';
            } else {
                prevArrow.style.opacity = '1';
                prevArrow.style.pointerEvents = 'auto';
            }
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–µ–ª–∫—É "–≤–ø–µ—Ä–µ–¥" –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–ª–∞–π–¥–µ
        if (nextArrow) {
            if (currentSlide === totalSlides - 1) {
                nextArrow.style.opacity = '0.3';
                nextArrow.style.pointerEvents = 'none';
            } else {
                nextArrow.style.opacity = '1';
                nextArrow.style.pointerEvents = 'auto';
            }
        }
    }

    function goToSlide(slideIndex) {
        const slideWidth = getSlideWidth();
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å–ª–∞–π–¥–∞
        currentSlide = Math.max(0, Math.min(slideIndex, totalSlides - 1));
        
        carouselTrack.style.transition = 'transform 0.3s ease';
        carouselTrack.style.transform = `translateX(${-currentSlide * slideWidth}px)`;
        
        // –û–ë–ù–û–í–õ–Ø–ï–ú –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ü–û–ó–ò–¶–ò–ò
        currentTranslate = -currentSlide * slideWidth;
        prevTranslate = currentTranslate;
        
        updateIndicators();
        updateArrows(); // ‚Üê –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–†–ï–õ–û–ö
        
        setTimeout(() => {
            carouselTrack.style.transition = '';
        }, 300);
    }

    function nextSlide() {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏ —Å—Ç—Ä–µ–ª–æ–∫ –ø–µ—Ä–µ–¥ –∞–Ω–∏–º–∞—Ü–∏–µ–π
        resetArrowStyles();
        
        if (currentSlide < totalSlides - 1) {
            goToSlide(currentSlide + 1);
        } else {
            goToSlide(0);
        }
    }

    function prevSlide() {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏ —Å—Ç—Ä–µ–ª–æ–∫ –ø–µ—Ä–µ–¥ –∞–Ω–∏–º–∞—Ü–∏–µ–π
        resetArrowStyles();
        
        if (currentSlide > 0) {
            goToSlide(currentSlide - 1);
        } else {
            goToSlide(totalSlides - 1);
        }
    }

    // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—Ç–∏–ª–µ–π —Å—Ç—Ä–µ–ª–æ–∫
    function resetArrowStyles() {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º hover-—ç—Ñ—Ñ–µ–∫—Ç —á–µ—Ä–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
        if (prevArrow) {
            prevArrow.style.background = 'rgba(0, 0, 0, 0.6)';
            prevArrow.style.transform = 'translateY(-50%) scale(1)';
        }
        if (nextArrow) {
            nextArrow.style.background = 'rgba(0, 0, 0, 0.6)';
            nextArrow.style.transform = 'translateY(-50%) scale(1)';
        }
        
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å–±—Ä–æ—Å–∞
        setTimeout(() => {
            if (prevArrow) {
                prevArrow.style.background = '';
                prevArrow.style.transform = '';
            }
            if (nextArrow) {
                nextArrow.style.background = '';
                nextArrow.style.transform = '';
            }
        }, 300);
    }

    function getPositionX(event) {
        return event.type.includes('mouse') ? event.pageX : event.touches[0].clientX;
    }

    function startDrag(event) {
        if (event.type === 'touchstart') event.preventDefault();
        
        isDragging = true;
        startPos = getPositionX(event);
        carousel.classList.add('grabbing');
        
        carouselTrack.style.transition = 'none';
        animationID = requestAnimationFrame(animation);
    }

    function drag(event) {
        if (!isDragging) return;
        
        const currentPosition = getPositionX(event);
        const dragDistance = currentPosition - startPos;
        currentTranslate = prevTranslate + dragDistance;
    }

    function endDrag() {
        if (!isDragging) return;
        
        isDragging = false;
        carousel.classList.remove('grabbing');
        cancelAnimationFrame(animationID);
        
        const slideWidth = getSlideWidth();
        const dragDistance = currentTranslate - prevTranslate;
        
        // –ü–†–û–°–¢–ê–Ø –ò –ù–ê–î–ï–ñ–ù–ê–Ø –õ–û–ì–ò–ö–ê
        let targetSlide = currentSlide;
        
        if (dragDistance < -50) {
            // –°–≤–∞–π–ø –≤–ª–µ–≤–æ - —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–∞–π–¥
            targetSlide = currentSlide + 1;
        } else if (dragDistance > 50) {
            // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ - –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–∞–π–¥
            targetSlide = currentSlide - 1;
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        targetSlide = Math.max(0, Math.min(targetSlide, totalSlides - 1));
        
        // –í–°–ï–ì–î–ê –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–∞–π–¥—É, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è (—Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é)
        goToSlide(targetSlide);
    }

    function animation() {
        carouselTrack.style.transform = `translateX(${currentTranslate}px)`;
        if (isDragging) {
            requestAnimationFrame(animation);
        }
    }

    function destroy() {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        Object.keys(eventHandlers).forEach(key => {
            const handler = eventHandlers[key];
            if (handler && typeof handler === 'function') {
                if (key === 'mouseDown') carousel.removeEventListener('mousedown', handler);
                if (key === 'mouseMove') window.removeEventListener('mousemove', handler);
                if (key === 'mouseUp') window.removeEventListener('mouseup', handler);
                if (key === 'touchStart') carousel.removeEventListener('touchstart', handler);
                if (key === 'touchMove') window.removeEventListener('touchmove', handler);
                if (key === 'touchEnd') window.removeEventListener('touchend', handler);
                if (key === 'prevClick') prevArrow.removeEventListener('click', handler);
                if (key === 'nextClick') nextArrow.removeEventListener('click', handler);
                if (key === 'resize') window.removeEventListener('resize', handler);
            }
        });
        
        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        eventHandlers.indicatorClicks.forEach((handler, index) => {
            if (indicators[index]) {
                indicators[index].removeEventListener('click', handler);
            }
        });
        
        if (animationID) {
            cancelAnimationFrame(animationID);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    eventHandlers.mouseDown = startDrag;
    eventHandlers.mouseMove = drag;
    eventHandlers.mouseUp = endDrag;
    eventHandlers.touchStart = startDrag;
    eventHandlers.touchMove = drag;
    eventHandlers.touchEnd = endDrag;
    eventHandlers.prevClick = prevSlide;
    eventHandlers.nextClick = nextSlide;
    eventHandlers.resize = initializePosition;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    carousel.addEventListener('mousedown', eventHandlers.mouseDown);
    window.addEventListener('mousemove', eventHandlers.mouseMove);
    window.addEventListener('mouseup', eventHandlers.mouseUp);

    carousel.addEventListener('touchstart', eventHandlers.touchStart, { passive: false });
    window.addEventListener('touchmove', eventHandlers.touchMove, { passive: false });
    window.addEventListener('touchend', eventHandlers.touchEnd);

    prevArrow.addEventListener('click', eventHandlers.prevClick);
    nextArrow.addEventListener('click', eventHandlers.nextClick);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    indicators.forEach((indicator, index) => {
        const handler = () => goToSlide(index);
        eventHandlers.indicatorClicks[index] = handler;
        indicator.addEventListener('click', handler);
    });

    carousel.addEventListener('dragstart', (e) => e.preventDefault());
    window.addEventListener('resize', eventHandlers.resize);

    carouselInstances[tabId] = { destroy };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    setTimeout(() => {
        initializePosition();
    }, 100);
}

// Initialize
document.addEventListener('DOMContentLoaded', function() {
    initTabs();
    initCarousel('women-tab');
});

// Initial check
handleScroll();

// Enhanced fix for both browser and Telegram
document.addEventListener('DOMContentLoaded', function() {
    const bg = document.querySelector('.background-fixed');
    
    function lockBackgroundSize() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        const width = Math.max(window.innerWidth, document.documentElement.clientWidth);
        const height = Math.max(window.innerHeight, document.documentElement.clientHeight);
        
        console.log('Locking background to:', width, 'x', height);
        
        // –§–∏–∫—Å–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        bg.style.width = width + 'px';
        bg.style.height = height + 'px';
        bg.style.position = 'fixed';
        bg.style.top = '0';
        bg.style.left = '0';
        bg.style.backgroundAttachment = 'fixed';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å
        bg.setAttribute('data-size-locked', 'true');
    }
    
    // –§–∏–∫—Å–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ä–∞–∑—É
    lockBackgroundSize();
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    window.addEventListener('load', lockBackgroundSize);
    
    // –§–∏–∫—Å–∏—Ä—É–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
    window.addEventListener('orientationchange', function() {
        setTimeout(lockBackgroundSize, 350);
    });
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –ª—é–±—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
    let resizeTimeout;
    window.addEventListener('resize', function() {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(() => {
            // –í Telegram –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º resize —Å–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            if (!bg.hasAttribute('data-telegram-resize-handled')) {
                lockBackgroundSize();
                bg.setAttribute('data-telegram-resize-handled', 'true');
            }
        }, 50);
    });
    
    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Ñ–∏–∫—Å –¥–ª—è Telegram WebView
    if (navigator.userAgent.includes('Telegram')) {
        console.log('Telegram WebView detected');
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è –¥–ª—è Telegram
        setTimeout(() => {
            lockBackgroundSize();
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω
            bg.style.backgroundSize = 'cover';
            bg.style.backgroundPosition = 'center';
            bg.style.backgroundRepeat = 'no-repeat';
        }, 500);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ –≤ Telegram
        let scrollTimeout;
        window.addEventListener('scroll', function() {
            clearTimeout(scrollTimeout);
            scrollTimeout = setTimeout(() => {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                const currentWidth = parseInt(bg.style.width);
                const currentHeight = parseInt(bg.style.height);
                
                if (currentWidth !== window.innerWidth || currentHeight !== window.innerHeight) {
                    lockBackgroundSize();
                }
            }, 100);
        });
    }
});

// Special Telegram fix with MutationObserver
function setupTelegramBackgroundFix() {
    const bg = document.querySelector('.background-fixed');
    
    // –§–∏–∫—Å–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    const initialWidth = window.innerWidth;
    const initialHeight = window.innerHeight;
    
    bg.style.width = initialWidth + 'px';
    bg.style.height = initialHeight + 'px';
    
    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ DOM –∏ —Å—Ç–∏–ª—è—Ö
    const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            if (mutation.type === 'attributes' && mutation.attributeName === 'style') {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—à–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                setTimeout(() => {
                    bg.style.width = initialWidth + 'px';
                    bg.style.height = initialHeight + 'px';
                }, 10);
            }
        });
    });
    
    // –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
    observer.observe(bg, {
        attributes: true,
        attributeFilter: ['style']
    });
    
    // –¢–∞–∫–∂–µ –±–ª–æ–∫–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ ResizeObserver
    const resizeObserver = new ResizeObserver(entries => {
        for (let entry of entries) {
            if (entry.target === bg) {
                bg.style.width = initialWidth + 'px';
                bg.style.height = initialHeight + 'px';
            }
        }
    });
    
    resizeObserver.observe(bg);
    
    return observer;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Telegram
if (navigator.userAgent.includes('Telegram')) {
    document.addEventListener('DOMContentLoaded', function() {
        setTimeout(() => {
            setupTelegramBackgroundFix();
        }, 1000);
    });
}
